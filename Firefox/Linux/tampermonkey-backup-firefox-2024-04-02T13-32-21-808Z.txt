{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Simple YouTube Age Restriction Bypass","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://www.youtube.com/*","https://www.youtube-nocookie.com/*","https://m.youtube.com/*","https://music.youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null},"user_modified":null},"storage":{"ts":1700650339223,"data":{}},"enabled":true,"position":1,"file_url":"https://github.com/zerodytrash/Simple-YouTube-Age-Restriction-Bypass/raw/main/dist/Simple-YouTube-Age-Restriction-Bypass.user.js","uuid":"2e20630b-41cd-41fe-94ae-fe0185658870","source":""},{"name":"Bypass Paywalls","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://*.adweek.com/*","*://*.ad.nl/*","*://*.americanbanker.com/*","*://*.ambito.com/*","*://*.baltimoresun.com/*","*://*.barrons.com/*","*://*.bloombergquint.com/*","*://*.bloomberg.com/*","*://*.bndestem.nl/*","*://*.bostonglobe.com/*","*://*.bd.nl/*","*://*.brisbanetimes.com.au/*","*://*.businessinsider.com/*","*://*.caixinglobal.com/*","*://*.centralwesterndaily.com.au/*","*://*.acs.org/*","*://*.chicagotribune.com/*","*://*.corriere.it/*","*://*.chicagobusiness.com/*","*://*.dailypress.com/*","*://*.gelderlander.nl/*","*://*.groene.nl/*","*://*.destentor.nl/*","*://*.speld.nl/*","*://*.tijd.be/*","*://*.volkskrant.nl/*","*://*.demorgen.be/*","*://*.denverpost.com/*","*://*.df.cl/*","*://*.editorialedomani.it/*","*://*.dynamed.com/*","*://*.ed.nl/*","*://*.elmercurio.com/*","*://*.elpais.com/*","*://*.elperiodico.com/*","*://*.elu24.ee/*","*://*.britannica.com/*","*://*.estadao.com.br/*","*://*.examiner.com.au/*","*://*.expansion.com/*","*://*.fnlondon.com/*","*://*.financialpost.com/*","*://*.ft.com/*","*://*.firstthings.com/*","*://*.foreignpolicy.com/*","*://*.fortune.com/*","*://*.genomeweb.com/*","*://*.glassdoor.com/*","*://*.globes.co.il/*","*://*.grubstreet.com/*","*://*.haaretz.co.il/*","*://*.haaretz.com/*","*://*.handelsblatt.com/*","*://*.harpers.org/*","*://*.courant.com/*","*://*.hbr.org/*","*://*.heraldsun.com.au/*","*://*.fd.nl/*","*://*.historyextra.com/*","*://*.humo.be/*","*://*.ilmanifesto.it/*","*://*.inc.com/*","*://*.interest.co.nz/*","*://*.investorschronicle.co.uk/*","*://*.lecho.be/*","*://*.labusinessjournal.com/*","*://*.lanacion.com.ar/*","*://*.repubblica.it/*","*://*.lastampa.it/*","*://*.latercera.com/*","*://*.lavoixdunord.fr/*","*://*.ledevoir.com/*","*://*.leparisien.fr/*","*://*.lesechos.fr/*","*://*.loebclassics.com/*","*://*.lrb.co.uk/*","*://*.latimes.com/*","*://*.mit.edu/*","*://*.technologyreview.com/*","*://*.medium.com/*","*://*.medscape.com/*","*://*.mexiconewsdaily.com/*","*://*.mv-voice.com/*","*://*.nationalgeographic.com/*","*://*.nydailynews.com/*","*://*.nrc.nl/*","*://*.ntnews.com.au/*","*://*.nationalpost.com/*","*://*.nzz.ch/*","*://*.nymag.com/*","*://*.nzherald.co.nz/*","*://*.ocregister.com/*","*://*.orlandosentinel.com/*","*://*.pzc.nl/*","*://*.paloaltoonline.com/*","*://*.parool.nl/*","*://*.postimees.ee/*","*://*.qz.com/*","*://*.quora.com/*","*://*.gelocal.it/*","*://*.republic.ru/*","*://*.reuters.com/*","*://*.sandiegouniontribune.com/*","*://*.sfchronicle.com/*","*://*.scientificamerican.com/*","*://*.seekingalpha.com/*","*://*.slate.com/*","*://*.sofrep.com/*","*://*.statista.com/*","*://*.startribune.com/*","*://*.stuff.co.nz/*","*://*.sun-sentinel.com/*","*://*.techinasia.com/*","*://*.telegraaf.nl/*","*://*.adelaidenow.com.au/*","*://*.theadvocate.com.au/*","*://*.theage.com.au/*","*://*.the-american-interest.com/*","*://*.theathletic.com/*","*://*.theathletic.co.uk/*","*://*.theatlantic.com/*","*://*.afr.com/*","*://*.theaustralian.com.au/*","*://*.bizjournals.com/*","*://*.canberratimes.com.au/*","*://*.thecourier.com.au/*","*://*.couriermail.com.au/*","*://*.thecut.com/*","*://*.dailytelegraph.com.au/*","*://*.thediplomat.com/*","*://*.economist.com/*","*://*.theglobeandmail.com/*","*://*.theherald.com.au/*","*://*.thehindu.com/*","*://*.irishtimes.com/*","*://*.kansascity.com/*","*://*.mercurynews.com/*","*://*.themercury.com.au/*","*://*.mcall.com/*","*://*.thenation.com/*","*://*.thenational.scot/*","*://*.newstatesman.com/*","*://*.nytimes.com/*","*://*.newyorker.com/*","*://*.news-gazette.com/*","*://*.theolivepress.es/*","*://*.inquirer.com/*","*://*.thesaturdaypaper.com.au/*","*://*.seattletimes.com/*","*://*.spectator.com.au/*","*://*.spectator.co.uk/*","*://*.smh.com.au/*","*://*.telegraph.co.uk/*","*://*.thestar.com/*","*://*.wsj.com/*","*://*.washingtonpost.com/*","*://*.thewrap.com/*","*://*.themarker.com/*","*://*.the-tls.co.uk/*","*://*.towardsdatascience.com/*","*://*.trouw.nl/*","*://*.tubantia.nl/*","*://*.vanityfair.com/*","*://*.vn.nl/*","*://*.vulture.com/*","*://*.journalnow.com/*","*://*.wired.com/*","*://*.worldpoliticsreview.com/*","*://*.zeit.de/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-end","orig_noframes":null},"user_modified":null},"storage":{"ts":1700733540004,"data":{}},"enabled":true,"position":2,"file_url":"https://github.com/LegeBeker/bypass-paywalls-tampermonkey/raw/master/bypass-paywalls-tampermonkey.user.js","uuid":"e2111df3-fd9e-4fcf-8bc9-6b64f6cb4e46","source":""},{"name":"Soundcloud Anti Repost","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":["https://soundcloud.com/feed"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-end","orig_noframes":null},"user_modified":null},"storage":{"ts":1700733717748,"data":{}},"enabled":true,"position":3,"file_url":"https://update.greasyfork.org/scripts/370377/Soundcloud%20Anti%20Repost.user.js","uuid":"162c7599-fa74-43e9-86fe-2065462cdb62","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBTb3VuZGNsb3VkIEFudGkgUmVwb3N0Ci8vIEB2ZXJzaW9uICAgICAgMS4yLjMKLy8gQGF1dGhvciAgICAgICBSZWRjcmFmdGVyCi8vIEBkZXNjcmlwdGlvbiAgUmVtb3ZlIHJlcG9zdHMgZnJvbSBzb3VuZGNsb3VkCi8vIEBsaWNlbnNlICAgICAgTUlUCi8vIEBpbmNsdWRlICAgICAgaHR0cHM6Ly9zb3VuZGNsb3VkLmNvbS9mZWVkCi8vIEBydW4tYXQgICAgICAgZG9jdW1lbnQtZW5kCi8vIEBuYW1lc3BhY2UgICAgaHR0cHM6Ly9naXRodWIuY29tL1JlZGNyYWZ0ZXIvCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gcmVtb3ZlUmVwb3N0cygpIHsKICAgIGZvciAoY29uc3QgaXRlbSBvZiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCIuc291bmRMaXN0X19pdGVtIikpIHsKICAgICAgICBpZiAoaXRlbS5xdWVyeVNlbGVjdG9yKCIuc291bmRDb250ZXh0X19yZXBvc3QiKSkgewogICAgICAgICAgICBpdGVtLnJlbW92ZSgpOwogICAgICAgIH0KICAgIH0KfQoKLy8gU2VhcmNoZXMgZm9yIHRoZSBwbGF5ZXJNYW5hZ2VyIG1vZHVsZQpmdW5jdGlvbiBtb2R1bGUoZSwgdCwgX3JlcXVpcmUpIHsKICAgIGxldCBtb2R1bGVzID0gX3JlcXVpcmUuYzsKCiAgICBmb3IgKGxldCBtb2R1bGVpZCBpbiBtb2R1bGVzKSB7CiAgICAgICAgaWYgKG1vZHVsZXMuaGFzT3duUHJvcGVydHkobW9kdWxlaWQpKSB7CiAgICAgICAgICAgIGxldCBlbCA9IF9yZXF1aXJlKG1vZHVsZWlkKTsKCiAgICAgICAgICAgIGlmICh0eXBlb2YgZWwucGxheUN1cnJlbnQgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgICAgIGluaXQoZWwpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCmZ1bmN0aW9uIGluaXQocGxheU1hbmFnZXIpIHsKICAgIC8vIEluamVjdCBhIGZ1bmN0aW9uIHRvIGNoZWNrIGZvciByZXBvc3RzCiAgICBsZXQgb2xkU2V0ID0gcGxheU1hbmFnZXIuc2V0Q3VycmVudEl0ZW07CiAgICBwbGF5TWFuYWdlci5zZXRDdXJyZW50SXRlbSA9IChlKSA9PiB7CiAgICAgICAgbGV0IHIgPSBmYWxzZTsKICAgICAgICB0cnkgewogICAgICAgICAgICAvLyBOb3Qgc3VyZSBpZiB0aGlzIHNhZmUKICAgICAgICAgICAgciA9IGUuX3N1Ym1vZGVsc1swXS5fZXZlbnRzWyJjaGFuZ2U6dXNlciJdWzFdLmNvbnRleHQub3B0aW9ucy5hY3Rpb25UeXBlID09PSAicmVwb3N0IjsKICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgICAvLyBjb25zb2xlLmVycm9yKCJBbiBFeGNlcHRpb24gb2Njb3VyZWQgd2hpbGUgdHJ5aW5nIHRvIGRldGVybWluZSByZXBvc3Qgc3RhdHVzIik7CiAgICAgICAgfQoKICAgICAgICBpZiAocikgewogICAgICAgICAgICBwbGF5TWFuYWdlci5yZW1vdmVJdGVtKGUpOwogICAgICAgICAgICBwbGF5TWFuYWdlci5wbGF5TmV4dCgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG9sZFNldChlKTsKICAgICAgICB9CiAgICB9OwoKfQoKc2V0SW50ZXJ2YWwocmVtb3ZlUmVwb3N0cywgNTAwKTsKCi8vIGluamVjdGlvbiBvdXIgb3duIG1vZHVsZQp1bnNhZmVXaW5kb3cud2VicGFja0pzb25wLnB1c2goW1sxMDAwMDAwXSwgeyAxMDAwMDAwOiBtb2R1bGUgfSwgW1sxMDAwMDAwXV1dKTsK"},{"name":"Youtube HD","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":true}},"storage":{"ts":1700756840547,"data":{"changeResolution":"btrue","preferPremium":"btrue","targetRes":"shd1080","highFramerateTargetRes":"onull","changePlayerSize":"bfalse","useCustomSize":"bfalse","customHeight":"n600","autoTheater":"bfalse","flushBuffer":"btrue","allowCookies":"bfalse","setResolutionEarly":"btrue","enableErrorScreenWorkaround":"btrue","useAPI":"btrue","overwriteStoredSettings":"bfalse","SettingsSaved":"btrue"}},"enabled":true,"position":4,"file_url":"https://update.greasyfork.org/scripts/23661/Youtube%20HD.user.js","uuid":"132520a7-4a7b-49eb-8015-3cb3c03d3909","source":""},{"name":"Youtube shorts redirect","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://*.youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null},"user_modified":null},"storage":{"ts":1700906230789,"data":{}},"enabled":true,"position":5,"file_url":"https://update.greasyfork.org/scripts/439993/Youtube%20shorts%20redirect.user.js","uuid":"250f8234-2a6c-4222-8b38-c9972a5ee10b","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBZb3V0dWJlIHNob3J0cyByZWRpcmVjdAovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly90YW1wZXJtb25rZXkubmV0LwovLyBAdmVyc2lvbiAgICAgIDAuMwovLyBAZGVzY3JpcHRpb24gIFlvdXR1ZWJlIHNob3J0cyA+IHdhdGNoIHJlZGlyZWN0Ci8vIEBhdXRob3IgICAgICAgRnVpbQovLyBAbWF0Y2ggICAgICAgICo6Ly8qLnlvdXR1YmUuY29tLyoKLy8gQGljb24gICAgICAgICBodHRwczovL3d3dy5nb29nbGUuY29tL3MyL2Zhdmljb25zP2RvbWFpbj15b3V0dWJlLmNvbQovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gQHJ1bi1hdCAgICAgICBkb2N1bWVudC1zdGFydAovLyBAbGljZW5zZSAgICAgIEdOVSBHUEx2MgovLyBAZG93bmxvYWRVUkwgaHR0cHM6Ly91cGRhdGUuZ3JlYXN5Zm9yay5vcmcvc2NyaXB0cy80Mzk5OTMvWW91dHViZSUyMHNob3J0cyUyMHJlZGlyZWN0LnVzZXIuanMKLy8gQHVwZGF0ZVVSTCBodHRwczovL3VwZGF0ZS5ncmVhc3lmb3JrLm9yZy9zY3JpcHRzLzQzOTk5My9Zb3V0dWJlJTIwc2hvcnRzJTIwcmVkaXJlY3QubWV0YS5qcwovLyA9PS9Vc2VyU2NyaXB0PT0KdmFyIG9sZEhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmOwppZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZigneW91dHViZS5jb20vc2hvcnRzJykgPiAtMSkgewogICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkucmVwbGFjZSgnL3Nob3J0cy8nLCAnL3dhdGNoP3Y9JykpOwp9CndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbigpIHsKICAgIHZhciBib2R5TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoImJvZHkiKQogICAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24obXV0YXRpb25zKSB7CiAgICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24obXV0YXRpb24pIHsKICAgICAgICAgICAgaWYgKG9sZEhyZWYgIT0gZG9jdW1lbnQubG9jYXRpb24uaHJlZikgewogICAgICAgICAgICAgICAgb2xkSHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnbG9jYXRpb24gY2hhbmdlZCEnKTsKICAgICAgICAgICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCd5b3V0dWJlLmNvbS9zaG9ydHMnKSA+IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkucmVwbGFjZSgnL3Nob3J0cy8nLCAnL3dhdGNoP3Y9JykpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9KTsKICAgIHZhciBjb25maWcgPSB7CiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLAogICAgICAgIHN1YnRyZWU6IHRydWUKICAgIH07CiAgICBvYnNlcnZlci5vYnNlcnZlKGJvZHlMaXN0LCBjb25maWcpOwp9Ow=="},{"name":"Redirect Twitter To Nitter","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":["*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":["https://twitter.com/*"],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-end","orig_noframes":null}},"storage":{"ts":1702319855982,"data":{}},"enabled":true,"position":6,"file_url":"https://update.greasyfork.org/scripts/418162/Redirect%20Twitter%20To%20Nitter.user.js","uuid":"3e0298ed-b6b7-4e6a-9c2c-c1375481e04b","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBSZWRpcmVjdCBUd2l0dGVyIFRvIE5pdHRlcgovLyBAbmFtZXNwYWNlICAgIGJyYXplbnZvaWQKLy8gQHZlcnNpb24gICAgICAxLjAuMwovLyBAZGVzY3JpcHRpb24gIENvbnZlcnQgdHdpdHRlciBVUkxzIHRvIE5pdHRlciBVUkxzCi8vIEBhdXRob3IgICAgICAgYnJhemVudm9pZAovLyBAaW5jbHVkZSAgICAgICoKLy8gQGV4Y2x1ZGUgICAgICBodHRwczovL3R3aXR0ZXIuY29tLyoKLy8gQHJ1bi1hdCAgICAgICBkb2N1bWVudC1lbmQKLy8gQGRvd25sb2FkVVJMIGh0dHBzOi8vdXBkYXRlLmdyZWFzeWZvcmsub3JnL3NjcmlwdHMvNDE4MTYyL1JlZGlyZWN0JTIwVHdpdHRlciUyMFRvJTIwTml0dGVyLnVzZXIuanMKLy8gQHVwZGF0ZVVSTCBodHRwczovL3VwZGF0ZS5ncmVhc3lmb3JrLm9yZy9zY3JpcHRzLzQxODE2Mi9SZWRpcmVjdCUyMFR3aXR0ZXIlMjBUbyUyME5pdHRlci5tZXRhLmpzCi8vID09L1VzZXJTY3JpcHQ9PQoKY29uc3QgTklUVEVSX1VSTCA9ICduaXR0ZXIubmV0Jwpjb25zdCBUV0lUVEVSX1VSTCA9ICd0d2l0dGVyLmNvbScKCmZ1bmN0aW9uIHJlZGlyZWN0VG9OaXR0ZXIgKCkgewogICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYVtocmVmKj0iJysgVFdJVFRFUl9VUkwgKyciXScpLmZvckVhY2goKGVsZW1lbnQpID0+IHsKICAgICAgICBlbGVtZW50LmhyZWYgPSBlbGVtZW50LmhyZWYucmVwbGFjZShUV0lUVEVSX1VSTCwgTklUVEVSX1VSTCkKICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gZWxlbWVudC50ZXh0Q29udGVudC5yZXBsYWNlKFRXSVRURVJfVVJMLCBOSVRURVJfVVJMKQogICAgfSkKfQoKKG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMpID0+IHsKICAgIGxldCBydW5DaGVjayA9IGZhbHNlCiAgICBmb3IgKGxldCBtdXRhdGlvbiBvZiBtdXRhdGlvbnMpIHsKICAgICAgICBpZiAobXV0YXRpb24uYWRkZWROb2Rlcy5sZW5ndGggfHwgbXV0YXRpb24uYXR0cmlidXRlTmFtZSA9PT0gJ2hyZWYnKSB7CiAgICAgICAgICAgIHJ1bkNoZWNrID0gdHJ1ZQogICAgICAgICAgICBicmVhawogICAgICAgIH0KICAgIH0KICAgIGlmIChydW5DaGVjaykgewogICAgICAgIHJlZGlyZWN0VG9OaXR0ZXIoKQogICAgfQp9KSkub2JzZXJ2ZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JyksIHthdHRyaWJ1dGVGaWx0ZXI6IFsnaHJlZiddLCBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWV9KQoKcmVkaXJlY3RUb05pdHRlcigp"},{"name":"Spotify link open in desktop app","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["http://open.spotify.com/*","https://open.spotify.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":true}},"storage":{"ts":1707211617801,"data":{}},"enabled":false,"position":7,"file_url":"https://update.greasyfork.org/scripts/485688/Spotify%20link%20open%20in%20desktop%20app.user.js","uuid":"0a6dc8b8-61d6-406f-b9cd-e3cd05efbb64","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBTcG90aWZ5IGxpbmsgb3BlbiBpbiBkZXNrdG9wIGFwcAovLyBAYXV0aG9yICAgICAgIE9yZGluYXJ5RG9nCi8vIEBkZXNjcmlwdGlvbiAgVGhpcyB1c2Vyc2NyaXB0IHJlZGlyZWN0cyBvcGVuLnNwb3RpZnkuY29tIGxpbmtzIHRvIHRoZSBkZXNrdG9wIGFwcCBhbmQgY2xvc2UgU3BvdGlmeSB0YWIgaW4gYnJvd3NlcgovLyBAdmVyc2lvbiAgICAgIDEuMwovLyBAbGljZW5zZSAgICAgIE1JVCBMaWNlbnNlCi8vIEBjb3B5cmlnaHQgICAgQ29weXJpZ2h0IChDKSAyMDE5LCBieSBvcmRpbmFyeWRvZ0Bwcm90b25tYWlsLmNvbQovLyBAbWF0Y2ggICAgICAgIGh0dHA6Ly9vcGVuLnNwb3RpZnkuY29tLyoKLy8gQG1hdGNoICAgICAgICBodHRwczovL29wZW4uc3BvdGlmeS5jb20vKgovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvdXNlcnMvMTcyNDMxCi8vIEBydW4tYXQgICAgICAgZG9jdW1lbnQtc3RhcnQKLy8gQG5vZnJhbWVzCi8vIEBkb3dubG9hZFVSTCBodHRwczovL3VwZGF0ZS5ncmVhc3lmb3JrLm9yZy9zY3JpcHRzLzQ4NTY4OC9TcG90aWZ5JTIwbGluayUyMG9wZW4lMjBpbiUyMGRlc2t0b3AlMjBhcHAudXNlci5qcwovLyBAdXBkYXRlVVJMIGh0dHBzOi8vdXBkYXRlLmdyZWFzeWZvcmsub3JnL3NjcmlwdHMvNDg1Njg4L1Nwb3RpZnklMjBsaW5rJTIwb3BlbiUyMGluJTIwZGVza3RvcCUyMGFwcC5tZXRhLmpzCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uICgpIHsKICAidXNlIHN0cmljdCI7CiAgdmFyIGRhdGEgPSBkb2N1bWVudC5VUkwubWF0Y2goCiAgICAvW1wvXCZdKHRyYWNrfHBsYXlsaXN0fGFsYnVtfGFydGlzdHxzaG93fGVwaXNvZGUpXC8oW15cJlwjXC9cP10rKS9pCiAgKTsKICBjb25zb2xlLmxvZygKICAgICJUaGlzIGlzIGEgIiArIGRhdGFbMV0gKyAiIHdpdGggaWQ6IiArIGRhdGFbMl0gKyAiXG5BdHRlbXB0aW5nIHRvIHJlZGlyZWN0IgogICk7CiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoInNwb3RpZnk6IiArIGRhdGFbMV0gKyAiOiIgKyBkYXRhWzJdKTsKICAKICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgIHdpbmRvdy50b3AuY2xvc2UoKTsKICB9LCAyMDAwKTsKfSkoKTsK"},{"name":"Cleanup YouTube Recommendations in Search and Playlist","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://www.youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1708508379516,"data":{}},"enabled":true,"position":8,"file_url":"https://update.greasyfork.org/scripts/436569/Cleanup%20YouTube%20Recommendations%20in%20Search%20and%20Playlist.user.js","uuid":"e266f325-730a-4d9c-972f-c5e445962cdb","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgICBDbGVhbnVwIFlvdVR1YmUgUmVjb21tZW5kYXRpb25zIGluIFNlYXJjaCBhbmQgUGxheWxpc3QKLy8gQG5hbWU6ZGUgICAgICAgICBCZXJlaW5pZ2UgWW91VHViZSBFbXBmZWhsdW5nZW4gaW4gZGVyIFN1Y2hlIHVuZCBiZWkgUGxheWxpc3RlbgovLyBAdmVyc2lvbiAgICAgICAgIDEuMS40Ci8vIEBkZXNjcmlwdGlvbiAgICAgRGVsZXRlcyAiUG9wdWxhciB2aWRlb3MgZnJvbSB0b2RheSIsICJVc2VycyBoYXZlIGFsc28gc2VlbiIsICJOZXcgY2hhbm5lbHMgZm9yIHlvdSIsICJGb3IgeW91IiwgIkFscmVhZHkgdmlld2VkIiwgIlJlY29tbWVuZGVkIHBsYXlsaXN0cyIgYW5kICJSZWNvbW1lbmRlZCB2aWRlb3MiIFNlY3Rpb25zIGZyb20gU2VhcmNoIFJlc3VsdHMgYW5kIFBsYXlsaXN0cyBvbiBZb3VUdWJlCi8vIEBkZXNjcmlwdGlvbjpkZSAgRW50ZmVybnQgZGllIEFic2Nobml0dGUgIkJlbGllYnRlIFZpZGVvcyB2b24gaGV1dGUiLCBOdXR6ZXIgaGFiZW4gYXVjaCBnZXNlaGVuIiwgIk5ldWUgS2Fuw6RsZSBmw7xyIGRpY2giLCAiRsO8ciBtaWNoIiwgIlNjaG9uIGFuZ2VzZWhlbiIsICJFbXBmb2hsZW5lIFBsYXlsaXN0cyIgdW5kICJFbXBmb2hsZW5lIFZpZGVvcyIgYXVzIGRlbiBTdWNoZXJnZWJuaXNzZW4gdW5kIGF1cyBQbGF5bGlzdGVuIGF1ZiBZb3VUdWJlCi8vIEBpY29uICAgICAgICAgICAgaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zMi9mYXZpY29ucz9kb21haW49eW91dHViZS5jb20KLy8gQGF1dGhvciAgICAgICAgICBUYWxrTG91bmdlIChodHRwczovL2dpdGh1Yi5jb20vVGFsa0xvdW5nZSkKLy8gQG5hbWVzcGFjZSAgICAgICBodHRwczovL2dpdGh1Yi5jb20vVGFsa0xvdW5nZS9jbGVhbnVwLXlvdXR1YmUtcmVjb21tZW5kYXRpb25zLXNlYXJjaC1wbGF5bGlzdAovLyBAbGljZW5zZSAgICAgICAgIE1JVAovLyBAbWF0Y2ggICAgICAgICAgIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tLyoKLy8gQGdyYW50ICAgICAgICAgICBub25lCi8vIEBkb3dubG9hZFVSTCBodHRwczovL3VwZGF0ZS5ncmVhc3lmb3JrLm9yZy9zY3JpcHRzLzQzNjU2OS9DbGVhbnVwJTIwWW91VHViZSUyMFJlY29tbWVuZGF0aW9ucyUyMGluJTIwU2VhcmNoJTIwYW5kJTIwUGxheWxpc3QudXNlci5qcwovLyBAdXBkYXRlVVJMIGh0dHBzOi8vdXBkYXRlLmdyZWFzeWZvcmsub3JnL3NjcmlwdHMvNDM2NTY5L0NsZWFudXAlMjBZb3VUdWJlJTIwUmVjb21tZW5kYXRpb25zJTIwaW4lMjBTZWFyY2glMjBhbmQlMjBQbGF5bGlzdC5tZXRhLmpzCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uICgpIHsKICAgICd1c2Ugc3RyaWN0JzsKCiAgICBmdW5jdGlvbiBjbGVhbnVwKCkgewogICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5zdGFydHNXaXRoKCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdCIpKSB7CiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3l0ZC1pdGVtLXNlY3Rpb24tcmVuZGVyZXJbaXMtcGxheWxpc3QtdmlkZW8tY29udGFpbmVyXScpPy5yZW1vdmUoKTsgLy8gUmVjb21tZW5kZWQgdmlkZW9zCiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3l0ZC1pdGVtLXNlY3Rpb24tcmVuZGVyZXJbaXMtcGxheWxpc3Qtc2hlbGZdJyk/LnJlbW92ZSgpOyAvLyBSZWNvbW1lbmRlZCBwbGF5bGlzdHMKICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcigneXRkLWNvbnRpbnVhdGlvbi1pdGVtLXJlbmRlcmVyOm50aC1jaGlsZCgyKScpPy5yZW1vdmUoKTsgLy8gTG9hZGluZyBjaXJjbGUKICAgICAgICB9CgogICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5zdGFydHNXaXRoKCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9yZXN1bHRzIikpIHsKICAgICAgICAgICAgWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoInl0ZC1zaGVsZi1yZW5kZXJlciIpXS5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5yZW1vdmUoKSk7IC8vIFNlY3Rpb25zOiBQb3B1bGFyIHZpZGVvcyBmcm9tIHRvZGF5LCBVc2VycyBoYXZlIGFsc28gc2VlbiwgTmV3IGNoYW5uZWxzIGZvciB5b3UsIEZvciB5b3UsIEFscmVhZHkgdmlld2VkCiAgICAgICAgICAgIFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCJ5dGQtaG9yaXpvbnRhbC1jYXJkLWxpc3QtcmVuZGVyZXIiKV0uZm9yRWFjaChpdGVtID0+IGl0ZW0ucmVtb3ZlKCkpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnN0YXJ0c1dpdGgoImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0AiKSAmJiAoIXdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoMikuaW5jbHVkZXMoIi8iKSB8fCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuZW5kc1dpdGgoIi9mZWF0dXJlZCIpKSkgewogICAgICAgICAgICBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgieXRkLXNoZWxmLXJlbmRlcmVyIildLmZpbHRlcihpdGVtID0+IGl0ZW0ucXVlcnlTZWxlY3RvcigieXQtaG9yaXpvbnRhbC1saXN0LXJlbmRlcmVyIikpLmZpbmQoaXRlbSA9PiAhaXRlbS5xdWVyeVNlbGVjdG9yKCIjcGxheS1idXR0b24iKS5jaGlsZHJlbi5sZW5ndGgpPy5yZW1vdmUoKTsgLy8gRm9yIHlvdQogICAgICAgICAgICBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgieXRkLWl0ZW0tc2VjdGlvbi1yZW5kZXJlciIpXS5maWx0ZXIoaXRlbSA9PiAhaXRlbS5xdWVyeVNlbGVjdG9yKCIjY29udGVudHMiKS5jaGlsZHJlbi5sZW5ndGgpWzBdPy5yZW1vdmUoKTsgLy8gRm9yIHlvdSBCb3JkZXIKICAgICAgICB9CiAgICB9CgogICAgY2xlYW51cCgpOwogICAgc2V0SW50ZXJ2YWwoY2xlYW51cCwgNTAwKTsKfSkoKTs="}]}